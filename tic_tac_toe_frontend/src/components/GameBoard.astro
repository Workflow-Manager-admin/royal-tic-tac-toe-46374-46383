---
/*
GameBoard.astro
- Interactive Tic Tac Toe board with "kings" as X and "queens" as O (SVG icons)
- Score tracking
- Restart/Reset controls
- Responsive, centered, minimalistic, modern design (uses provided primary, accent, and secondary colors)
- Light theme
*/
const boardSize = 3;
---

<div class="viewport-center">
  <div class="game-container">
    <header>
      <h1>Tic Tac Toe: Kings &amp; Queens</h1>
      <p class="subtitle">X = King ðŸ‘‘ &nbsp;|&nbsp; O = Queen ðŸ‘¸</p>
    </header>
    <div id="board-status" class="status"></div>
    <div id="board" class="board">
      <!-- cells rendered by JS -->
    </div>
    <div class="score-controls">
      <div class="scores">
        <div>
          <span class="icon king" title="King (X)"><svg width="24" height="24" viewBox="0 0 36 36" fill="none"><path d="M10 29H26V32H10V29Z" fill="#4a90e2"/><path d="M6 26h24l-3-14-5 8-4-6-5 8-3-14" fill="#f5a623" stroke="#4a90e2" stroke-width="2" stroke-linejoin="round"/><circle cx="7" cy="9" r="2" fill="#4a90e2"/><circle cx="18" cy="5" r="2" fill="#4a90e2"/><circle cx="29" cy="9" r="2" fill="#4a90e2"/></svg></span>
          <span id="score-x">0</span>
        </div>
        <div>
          <span class="icon queen" title="Queen (O)"><svg width="24" height="24" viewBox="0 0 36 36" fill="none"><ellipse cx="18" cy="24" rx="10" ry="7" fill="#f5a623" stroke="#4a90e2" stroke-width="2"/><path d="M12 23L10 15l7 6.5L24 15l-2 8" fill="none" stroke="#4a90e2" stroke-width="2"/><circle cx="18" cy="11" r="2.2" fill="#4a90e2"/><circle cx="25" cy="13" r="1.5" fill="#4a90e2"/><circle cx="11" cy="13" r="1.5" fill="#4a90e2"/></svg></span>
          <span id="score-o">0</span>
        </div>
        <div>
          <span title="Draws" class="icon draw" style="font-size:1.5em;color:#aaa;">â€“</span>
          <span id="score-draw">0</span>
        </div>
      </div>
      <div class="controls">
        <button id="restart-btn" type="button" class="restart" aria-label="Restart game">Restart Game</button>
        <button id="reset-btn" type="button" class="reset" aria-label="Reset scores">Reset Scores</button>
      </div>
    </div>
  </div>
</div>

<script type="module">
  // Game state
  let board = Array(3).fill(null).map(() => Array(3).fill(null));
  let xTurn = true;
  let gameActive = true;
  let scoreX = 0, scoreO = 0, scoreDraw = 0;

  // DOM Elements
  const boardDiv = document.getElementById('board');
  const statusDiv = document.getElementById('board-status');
  const scoreXElem = document.getElementById('score-x');
  const scoreOElem = document.getElementById('score-o');
  const scoreDrawElem = document.getElementById('score-draw');
  const restartBtn = document.getElementById('restart-btn');
  const resetBtn = document.getElementById('reset-btn');

  const kingSVG = `<svg width="36" height="36" viewBox="0 0 36 36" fill="none"><path d="M10 29H26V32H10V29Z" fill="#4a90e2"/><path d="M6 26h24l-3-14-5 8-4-6-5 8-3-14" fill="#f5a623" stroke="#4a90e2" stroke-width="2" stroke-linejoin="round"/><circle cx="7" cy="9" r="2" fill="#4a90e2"/><circle cx="18" cy="5" r="2" fill="#4a90e2"/><circle cx="29" cy="9" r="2" fill="#4a90e2"/></svg>`;
  const queenSVG = `<svg width="36" height="36" viewBox="0 0 36 36" fill="none"><ellipse cx="18" cy="24" rx="10" ry="7" fill="#f5a623" stroke="#4a90e2" stroke-width="2"/><path d="M12 23L10 15l7 6.5L24 15l-2 8" fill="none" stroke="#4a90e2" stroke-width="2"/><circle cx="18" cy="11" r="2.2" fill="#4a90e2"/><circle cx="25" cy="13" r="1.5" fill="#4a90e2"/><circle cx="11" cy="13" r="1.5" fill="#4a90e2"/></svg>`;

  // Initialize board
  function renderBoard() {
    boardDiv.innerHTML = "";
    for (let r = 0; r < 3; r++) {
      for (let c = 0; c < 3; c++) {
        const cell = document.createElement('div');
        cell.className = 'cell';
        cell.dataset.row = r;
        cell.dataset.col = c;
        if(board[r][c] === 'X') {
          cell.innerHTML = `<span class="piece king">${kingSVG}</span>`;
        } else if(board[r][c] === 'O') {
          cell.innerHTML = `<span class="piece queen">${queenSVG}</span>`;
        } else {
          cell.innerHTML = '';
        }
        if (gameActive && !board[r][c]) {
          cell.addEventListener('click', handleCellClick);
        }
        boardDiv.appendChild(cell);
      }
    }
  }

  function setStatus(msg) {
    statusDiv.textContent = msg;
  }

  function checkWinner() {
    const lines = [];
    // Rows and Cols
    for(let i=0;i<3;i++) {
      lines.push(board[i]); // rows
      lines.push(board.map(row=>row[i])); // cols
    }
    // Diagonals
    lines.push(board.map((row,i)=>row[i]));
    lines.push(board.map((row,i)=>row[3-1-i]));
    for (const line of lines) {
      if (line.every(cell => cell === 'X')) return 'X';
      if (line.every(cell => cell === 'O')) return 'O';
    }
    if (board.flat().every(cell => cell)) return 'draw';
    return null;
  }

  function updateScoresAndStatus(winner) {
    // Score display and status message
    if (winner === 'X') {
      setStatus("King (X) wins! ðŸ‘‘");
      scoreX++;
    } else if (winner === 'O') {
      setStatus("Queen (O) wins! ðŸ‘¸");
      scoreO++;
    } else if (winner === 'draw') {
      setStatus("It's a draw.");
      scoreDraw++;
    } else {
      setStatus(`${xTurn ? "King (X) ðŸ‘‘" : "Queen (O) ðŸ‘¸"}'s turn`);
    }
    scoreXElem.textContent = scoreX;
    scoreOElem.textContent = scoreO;
    scoreDrawElem.textContent = scoreDraw;
  }

  function handleCellClick(ev) {
    if (!gameActive) return;
    const r = parseInt(ev.currentTarget.dataset.row);
    const c = parseInt(ev.currentTarget.dataset.col);
    if (board[r][c]) return;
    board[r][c] = xTurn ? 'X' : 'O';
    xTurn = !xTurn;
    const winner = checkWinner();
    if (winner) {
      gameActive = false;
      updateScoresAndStatus(winner);
    } else {
      updateScoresAndStatus(null);
    }
    renderBoard();
  }

  function restartGame() {
    // Keep scores, reset board/game state
    board = Array(3).fill(null).map(() => Array(3).fill(null));
    xTurn = true;
    gameActive = true;
    updateScoresAndStatus(null);
    renderBoard();
  }

  function resetScores() {
    // Resets everything
    scoreX = 0;
    scoreO = 0;
    scoreDraw = 0;
    restartGame();
  }

  // Responsive square board
  function setBoardDimensions() {
    const size = Math.min(window.innerWidth, window.innerHeight-200, 400);
    boardDiv.style.width = boardDiv.style.height = size + "px";
  }

  window.addEventListener('resize', setBoardDimensions);

  // Setup
  function init() {
    if (restartBtn) restartBtn.onclick = restartGame;
    if (resetBtn) resetBtn.onclick = resetScores;
    updateScoresAndStatus(null);
    renderBoard();
    setBoardDimensions();
  }
  // Wait for DOM ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }
</script>

<style>
/* Viewport-level centering for all content */
.viewport-center {
  min-height: 100vh;
  width: 100vw;
  display: flex;
  align-items: center;
  justify-content: center;
  background: var(--bg-color, #fff);
  box-sizing: border-box;
}

/* Central game container styling */
.game-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  max-width: 440px;
  width: 100vw;
  margin: 0 auto;
  box-sizing: border-box;
  padding: 28px 10px 10px 10px;
  background: rgba(255,255,255,0.97);
  border-radius: 18px 18px 24px 24px;
  box-shadow:
    0 2px 18px 0 rgba(74,144,226,0.08),
    0 7px 35px 0 rgba(245,166,35,0.08);
}

header {
  width: 100%;
  text-align: center;
}
header h1 {
  font-size: 2.08rem;
  color: #4a90e2;
  margin: 0 0 2px 0;
  letter-spacing: -1px;
  font-weight: 700;
}
header .subtitle {
  color: #f5a623;
  font-size: 1.05rem;
  font-weight: 400;
  margin: 0 0 18px 0;
  letter-spacing: 1px;
}
.status {
  font-size: 1.09rem;
  min-height: 29px;
  margin-bottom: 8px;
  font-weight: 500;
  color: #222;
  text-align: center;
  padding: 2px 1px;
}

/* Modern, clear tic-tac-toe board */
.board {
  display: grid;
  grid-template-columns: repeat(3,1fr);
  grid-template-rows: repeat(3,1fr);
  position: relative;
  margin-bottom: 22px;
  background: #ecf0f1;
  border-radius: 1.2em;
  box-shadow: 0 2px 12px 0 rgba(74,144,226,0.08), 0 1.5px 6px 0 rgba(245,166,35,0.06);
  width: 350px;
  height: 350px;
  max-width: 85vw;
  max-height: 60vw;
  transition: width 0.2s, height 0.2s;
  /* Thick outside border in primary */
  border: 3.5px solid #4a90e2;
  box-sizing: border-box;
}

.cell {
  background: #fff;
  border: none;
  border-radius: 7.5px;
  /* Use pseudo-element to draw grid lines */
  position: relative;
  box-shadow: 0 1px 8px rgba(74,144,226,0.04);
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  font-size: 2.5rem;
  min-width: 0;
  min-height: 0;
  transition: background 0.18s;
  aspect-ratio: 1 / 1;
  will-change: background;
  z-index: 2;
}

/* Draw grid lines using :after with correct position */
.cell::after {
  content: '';
  position: absolute;
  z-index: 3;
  pointer-events: none;
}
.cell[data-row="0"]:not([data-col="2"])::after,
.cell[data-row="1"]:not([data-col="2"])::after,
.cell[data-row="2"]:not([data-col="2"])::after {
  /* vertical lines, right border except last col */
  top: 6%;
  right: -3.5px;
  bottom: 6%;
  width: 3px;
  background: linear-gradient(to bottom, #f5a623 60%, #4a90e2 100%);
  border-radius: 2px;
}
.cell[data-row="0"][data-col]:not([data-row="2"])::after,
.cell[data-row="1"][data-col]:not([data-row="2"])::after {
  /* horizontal line, bottom border except last row */
  left: 7%;
  right: 7%;
  bottom: -3.5px;
  height: 3px;
  background: linear-gradient(to right, #f5a623 60%, #4a90e2 100%);
  border-radius: 2px;
}

.cell[data-row="0"][data-col="0"]::after,
.cell[data-row="0"][data-col="1"]::after,
.cell[data-row="1"][data-col="0"]::after,
.cell[data-row="1"][data-col="1"]::after {
  box-shadow:
    0 3.5px 0 0 #f5a623,
    3.5px 0 0 0 #f5a623;
}

.cell:hover {
  background: #f5faff;
}
.piece svg {
  display: block;
  width: 38px;
  height: 38px;
  margin: 0 auto;
  filter: drop-shadow(0 2px 1px #4a90e22c);
}
.king svg { filter: drop-shadow(0 2px 1px #f5a62344);}
.queen svg { filter: drop-shadow(0 2px 1px #4a90e244);}
.score-controls {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-top: 10px;
  width: 100%;
  gap: 7px;
}
.scores {
  display: flex;
  gap: 32px;
  justify-content: center;
  align-items: center;
  font-size: 1.09rem;
  margin-bottom: 7px;
}
.scores > div {
  display: flex;
  align-items: center;
  gap: 7px;
  font-weight: 600;
  color: #4a90e2;
  background: #ecf0f1;
  padding: 7px 16px;
  border-radius: 9px;
  box-shadow: 0 1.5px 7.5px rgba(245,166,35,0.06);
}
.scores .icon {
  display: inline-block;
  vertical-align: middle;
}
.scores .king svg { width: 24px; }
.scores .queen svg { width: 24px; }

.controls {
  display: flex;
  gap: 16px;
  margin-top: 2px;
  justify-content: center;
  width: 100%;
}
button.restart, button.reset {
  border: none;
  outline: none;
  padding: 9px 18px;
  font-size: 1.08rem;
  border-radius: 8px;
  font-weight: 600;
  background: #4a90e2;
  color: #fff;
  cursor: pointer;
  transition: background 0.16s, box-shadow 0.18s;
  box-shadow: 0 2px 12px rgba(74,144,226,0.10);
}
button.reset {
  background: #f5a623;
  color: #fff;
}
button.restart:hover, button.reset:hover {
  box-shadow: 0 4px 16px rgba(245,166,35,0.09);
  background: #214f7f;
  color: #fff;
}
button.reset:hover {
  background: #b57c1d;
}

@media (max-width: 560px) {
  .game-container { max-width: 99.5vw; }
  .board {
    width: 95vw;
    height: 95vw;
    max-width: 99vw;
    max-height: 99vw;
  }
}

@media (max-width: 350px) {
  header h1 { font-size: 1.08rem; }
  .board { width: 85vw; height: 85vw;}
}

/* Remove board & cell outline while focused for accessibility/minimal look */
.board:focus, .cell:focus {
  outline: none;
}
</style>
