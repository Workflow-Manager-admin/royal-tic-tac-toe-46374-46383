---
/*
GameBoard.astro
- Reworked for: bold gridlines, big/centered grid squares and icons, proper centering, accent/primary color theme, full responsiveness, modern look.
- Board and icons scale with viewport, all elements centered and visually clear.
*/
const boardSize = 3;
---

<div class="viewport-center">
  <div class="game-container">
    <header>
      <h1>Tic Tac Toe: Kings &amp; Queens</h1>
      <p class="subtitle">X = King ðŸ‘‘ &nbsp;|&nbsp; O = Queen ðŸ‘¸</p>
    </header>
    <div id="board-status" class="status"></div>
    <div id="board" class="board-grid" aria-label="Tic Tac Toe Board"></div>
    <div class="score-controls">
      <div class="scores">
        <div>
          <span class="icon king" title="King (X)">
            <svg width="32" height="32" viewBox="0 0 36 36" fill="none">
              <path d="M10 29H26V32H10V29Z" fill="#4a90e2"/>
              <path d="M6 26h24l-3-14-5 8-4-6-5 8-3-14" fill="#f5a623" stroke="#4a90e2" stroke-width="2" stroke-linejoin="round"/>
              <circle cx="7" cy="9" r="2" fill="#4a90e2"/>
              <circle cx="18" cy="5" r="2" fill="#4a90e2"/>
              <circle cx="29" cy="9" r="2" fill="#4a90e2"/>
            </svg>
          </span>
          <span id="score-x">0</span>
        </div>
        <div>
          <span class="icon queen" title="Queen (O)">
            <svg width="32" height="32" viewBox="0 0 36 36" fill="none">
              <ellipse cx="18" cy="24" rx="10" ry="7" fill="#f5a623" stroke="#4a90e2" stroke-width="2"/>
              <path d="M12 23L10 15l7 6.5L24 15l-2 8" fill="none" stroke="#4a90e2" stroke-width="2"/>
              <circle cx="18" cy="11" r="2.2" fill="#4a90e2"/>
              <circle cx="25" cy="13" r="1.5" fill="#4a90e2"/>
              <circle cx="11" cy="13" r="1.5" fill="#4a90e2"/>
            </svg>
          </span>
          <span id="score-o">0</span>
        </div>
        <div>
          <span title="Draws" class="icon draw" style="font-size:1.5em;color:#aaa;">â€“</span>
          <span id="score-draw">0</span>
        </div>
      </div>
      <div class="controls">
        <button id="restart-btn" type="button" class="restart" aria-label="Restart game">Restart Game</button>
        <button id="reset-btn" type="button" class="reset" aria-label="Reset scores">Reset Scores</button>
      </div>
    </div>
  </div>
</div>

<script type="module">
// Game state
let board = Array(3).fill(null).map(() => Array(3).fill(null));
let xTurn = true;
let gameActive = true;
let scoreX = 0, scoreO = 0, scoreDraw = 0;

// DOM Elements
const boardDiv = document.getElementById('board');
const statusDiv = document.getElementById('board-status');
const scoreXElem = document.getElementById('score-x');
const scoreOElem = document.getElementById('score-o');
const scoreDrawElem = document.getElementById('score-draw');
const restartBtn = document.getElementById('restart-btn');
const resetBtn = document.getElementById('reset-btn');

const kingSVG = `<svg width="60" height="60" viewBox="0 0 36 36" fill="none">
<path d="M10 29H26V32H10V29Z" fill="#4a90e2"/>
<path d="M6 26h24l-3-14-5 8-4-6-5 8-3-14" fill="#f5a623" stroke="#4a90e2" stroke-width="2.2" stroke-linejoin="round"/>
<circle cx="7" cy="9" r="2.4" fill="#4a90e2"/>
<circle cx="18" cy="5" r="2.4" fill="#4a90e2"/>
<circle cx="29" cy="9" r="2.4" fill="#4a90e2"/>
</svg>`;
const queenSVG = `<svg width="60" height="60" viewBox="0 0 36 36" fill="none">
<ellipse cx="18" cy="24" rx="10" ry="7" fill="#f5a623" stroke="#4a90e2" stroke-width="2.2"/>
<path d="M12 23L10 15l7 6.5L24 15l-2 8" fill="none" stroke="#4a90e2" stroke-width="2.2"/>
<circle cx="18" cy="11" r="2.7" fill="#4a90e2"/>
<circle cx="25" cy="13" r="1.8" fill="#4a90e2"/>
<circle cx="11" cy="13" r="1.8" fill="#4a90e2"/>
</svg>`;

// Initialize board
function renderBoard() {
  boardDiv.innerHTML = "";
  for (let r = 0; r < 3; r++) {
    for (let c = 0; c < 3; c++) {
      const cell = document.createElement('div');
      cell.className = 'cell';
      cell.dataset.row = r;
      cell.dataset.col = c;

      // Grid line classes for explicit visual borders
      if (r !== 2) cell.classList.add('bottom-border');
      if (c !== 2) cell.classList.add('right-border');

      if(board[r][c] === 'X') {
        cell.innerHTML = `<span class="piece king">${kingSVG}</span>`;
      } else if(board[r][c] === 'O') {
        cell.innerHTML = `<span class="piece queen">${queenSVG}</span>`;
      } else {
        cell.innerHTML = '';
      }
      if (gameActive && !board[r][c]) {
        cell.addEventListener('click', handleCellClick);
      }
      boardDiv.appendChild(cell);
    }
  }
}

function setStatus(msg) {
  statusDiv.textContent = msg;
}

function checkWinner() {
  const lines = [];
  for(let i=0;i<3;i++) {
    lines.push(board[i]); //rows
    lines.push(board.map(row=>row[i])); //cols
  }
  lines.push(board.map((row,i)=>row[i]));
  lines.push(board.map((row,i)=>row[2-i]));
  for (const line of lines) {
    if (line.every(cell => cell === 'X')) return 'X';
    if (line.every(cell => cell === 'O')) return 'O';
  }
  if (board.flat().every(cell => cell)) return 'draw';
  return null;
}

function updateScoresAndStatus(winner) {
  if (winner === 'X') {
    setStatus("King (X) wins! ðŸ‘‘");
    scoreX++;
  } else if (winner === 'O') {
    setStatus("Queen (O) wins! ðŸ‘¸");
    scoreO++;
  } else if (winner === 'draw') {
    setStatus("It's a draw.");
    scoreDraw++;
  } else {
    setStatus(`${xTurn ? "King (X) ðŸ‘‘" : "Queen (O) ðŸ‘¸"}'s turn`);
  }
  scoreXElem.textContent = scoreX;
  scoreOElem.textContent = scoreO;
  scoreDrawElem.textContent = scoreDraw;
}

function handleCellClick(ev) {
  if (!gameActive) return;
  const r = parseInt(ev.currentTarget.dataset.row);
  const c = parseInt(ev.currentTarget.dataset.col);
  if (board[r][c]) return;
  board[r][c] = xTurn ? 'X' : 'O';
  xTurn = !xTurn;
  const winner = checkWinner();
  if (winner) {
    gameActive = false;
    updateScoresAndStatus(winner);
  } else {
    updateScoresAndStatus(null);
  }
  renderBoard();
}

function restartGame() {
  board = Array(3).fill(null).map(() => Array(3).fill(null));
  xTurn = true;
  gameActive = true;
  updateScoresAndStatus(null);
  renderBoard();
}

function resetScores() {
  scoreX = 0;
  scoreO = 0;
  scoreDraw = 0;
  restartGame();
}

// Responsive: board is square and scales, centers in viewport
function setBoardDimensions() {
  const maxBoardSize = Math.min(window.innerWidth, window.innerHeight-180, 440);
  boardDiv.style.width = boardDiv.style.height = maxBoardSize + 'px';
}
window.addEventListener('resize', setBoardDimensions);

// Setup
function init() {
  if (restartBtn) restartBtn.onclick = restartGame;
  if (resetBtn) resetBtn.onclick = resetScores;
  updateScoresAndStatus(null);
  renderBoard();
  setBoardDimensions();
}
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', init);
} else {
  init();
}
</script>

<style>
:root {
  --primary: #4a90e2;
  --accent: #f5a623;
  --secondary: #ecf0f1;
  --board-bg: var(--secondary);
  --cell-bg: #fff;
  --line-color: var(--primary);
  --hover-bg: #f5faff;
  --win-highlight: #f5a623;
}

/* Viewport centering: centers .game-container vertically/horizontally always */
.viewport-center {
  min-height: 100vh;
  width: 100vw;
  display: flex;
  align-items: center;
  justify-content: center;
  background: var(--bg-color, #fff);
  box-sizing: border-box;
}

/* Central game container with subtle panel styling */
.game-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  max-width: 490px;
  width: 100vw;
  margin: 0 auto;
  padding: 32px 14px 14px 14px;
  box-sizing: border-box;
  background: rgba(255,255,255,0.98);
  border-radius: 22px 22px 30px 30px;
  box-shadow:
    0 3px 23px 0 rgba(74,144,226,0.10),
    0 10px 32px 0 rgba(245,166,35,0.09);
  min-height: 550px;
}

header {
  width: 100%;
  text-align: center;
}
header h1 {
  font-size: 2.22rem;
  color: var(--primary);
  margin: 0 0 3px 0;
  letter-spacing: -1px;
  font-weight: 700;
}
header .subtitle {
  color: var(--accent);
  font-size: 1.11rem;
  font-weight: 400;
  margin-bottom: 20px;
  letter-spacing: 1px;
}

.status {
  font-size: 1.13rem;
  min-height: 30px;
  margin-bottom: 12px;
  font-weight: 500;
  color: #222;
  text-align: center;
  padding: 4px 1px;
}

/* Board: perfect square, CSS Grid, thick visible gridlines */
.board-grid {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  grid-template-rows: repeat(3, 1fr);
  place-items: stretch stretch;
  position: relative;
  background: var(--board-bg);
  border-radius: 18px;
  box-shadow: 0 2px 14px 0 rgba(74,144,226,0.10), 0 2.5px 10px 0 rgba(245,166,35,0.08);
  width: 420px;
  height: 420px;
  max-width: 95vw;
  max-height: 70vw;
  min-width: 252px;
  min-height: 252px;
  border: 5.5px solid var(--primary); /* Bold outside border */
  box-sizing: border-box;
  margin: 0 auto 30px auto;
  transition: width 0.2s, height 0.2s;
}

.cell {
  background: var(--cell-bg);
  min-width: 80px;
  min-height: 80px;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 2.8rem;
  cursor: pointer;
  aspect-ratio: 1 / 1;
  position: relative;
  z-index: 1;
  transition: background 0.16s;
  border: none;
  /* No border, gridline as pseudo or via classes */
  will-change: background;
}

/* Draw visible gridlines (bold) using classes for all except last col/row */
.cell.right-border {
  border-right: 4px solid var(--accent);
}
.cell.bottom-border {
  border-bottom: 4px solid var(--primary);
}

.cell:hover, .cell:focus {
  background: var(--hover-bg);
}

.piece {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 95%;
  height: 95%;
}
.piece.king, .piece.queen {
  /* Big SVG, centered, fills grid square */
  width: 60px;
  height: 60px;
  max-width: 75%;
  max-height: 75%;
}
.piece svg {
  width: 100%;
  height: 100%;
  display: block;
  margin: auto;
  filter: drop-shadow(0 3px 3px #4a90e232);
}
.piece.king svg { filter: drop-shadow(0 2px 2px #f5a62346);}
.piece.queen svg { filter: drop-shadow(0 2px 2px #4a90e246);}

/* Score and Controls */
.score-controls {
  width: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-top: 12px;
  gap: 13px;
}
.scores {
  display: flex;
  gap: 34px;
  justify-content: center;
  align-items: center;
  font-size: 1.12rem;
  margin-bottom: 9px;
}
.scores > div {
  display: flex;
  align-items: center;
  gap: 10px;
  font-weight: 700;
  color: var(--primary);
  background: var(--secondary);
  padding: 9px 20px;
  border-radius: 11px;
  box-shadow: 0 2px 9px rgba(245,166,35,0.08);
}
.scores .icon {
  display: inline-block;
  vertical-align: middle;
}
.scores .king svg,
.scores .queen svg {
  width: 26px;
  height: 26px;
}

.controls {
  display: flex;
  gap: 24px;
  margin-top: 2px;
  justify-content: center;
  width: 100%;
}
button.restart, button.reset {
  border: none;
  outline: none;
  padding: 10px 22px;
  font-size: 1.14rem;
  border-radius: 9px;
  font-weight: 700;
  background: var(--primary);
  color: #fff;
  cursor: pointer;
  transition: background 0.15s, box-shadow 0.12s, color 0.13s;
  box-shadow: 0 2.5px 16px rgba(74,144,226,0.13);
}
button.reset {
  background: var(--accent);
  color: #fff;
}
button.restart:hover, button.reset:hover {
  box-shadow: 0 6px 20px rgba(245,166,35,0.10);
  background: #214f7f;
}
button.reset:hover {
  background: #b57c1d;
}

/* Responsive styles for mobile and flexible scaling */
@media (max-width: 600px) {
  .game-container { max-width: 99vw; min-height: 98vw;}
  .board-grid {
     width: 98vw;
     height: 98vw;
     min-width: 180px;
     min-height: 180px;
     max-width: 99vw;
     max-height: 99vw;
  }
}

@media (max-width: 400px) {
  header h1 { font-size: 1.2rem; }
  .board-grid { min-width: 80vw; min-height: 80vw;}
}

/* Hide outline for accessibility/minimal look */
.board-grid:focus, .cell:focus { outline: none; }

</style>
